// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                      Int      @id @default(autoincrement())
  name                    String   @db.VarChar(100)
  email                   String   @unique @db.VarChar(255)
  password                String   @db.VarChar(255)
  role                    String   @default("user") @db.VarChar(20)
  username                String?  @unique @db.VarChar(50)
  profile_image           String?  @db.VarChar(500)
  description             String?  @db.Text
  country                 String?  @db.VarChar(100)
  is_online               Boolean  @default(false)
  total_orders_completed  Int      @default(0)
  created_at              DateTime @default(now())
  updated_at              DateTime @default(now()) @updatedAt

  // Relations
  skills                  User_skills[]
  languages               User_languages[]
  gigs                    Gigs[]
  buyer_orders            Orders[] @relation("BuyerOrders")
  seller_orders           Orders[] @relation("SellerOrders")
  sent_messages           Chat_messages[]
  participant1_convos     Conversation[] @relation("Participant1")
  participant2_convos     Conversation[] @relation("Participant2")
  given_reviews           Reviews[] @relation("ReviewGiver")
  received_reviews        Reviews[] @relation("ReviewReceiver")
  revision_requests       Order_revisions[]

  @@map("Users")
}

model Categories {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String? @db.Text
  icon        String? @db.VarChar(100)
  
  gigs        Gigs[]

  @@map("Categories")
}

model Languages {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(100)
  code  String @unique @db.VarChar(5)
  
  user_languages User_languages[]

  @@map("Languages")
}

model User_skills {
  id      Int    @id @default(autoincrement())
  user_id Int
  skill   String @db.VarChar(100)
  
  user    Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("User_skills")
}

model User_languages {
  id          Int @id @default(autoincrement())
  user_id     Int
  language_id Int
  level       String @default("beginner") @db.VarChar(20)
  
  user        Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  language    Languages @relation(fields: [language_id], references: [id], onDelete: Cascade)

  @@map("User_languages")
}

model Gigs {
  id               Int      @id @default(autoincrement())
  user_id          Int
  category_id      Int
  title            String   @db.VarChar(255)
  description      String   @db.Text
  short_description String  @db.VarChar(255)
  delivery_time    Int
  revisions        Int      @default(0)
  features         Json?
  starting_price   Decimal  @db.Decimal(10, 2)
  images           Json?
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt
  
  user             Users      @relation(fields: [user_id], references: [id])
  category         Categories @relation(fields: [category_id], references: [id])
  orders           Orders[]
  images_rel       Gig_images[]

  @@map("Gigs")
}

model Gig_images {
  id      Int    @id @default(autoincrement())
  gig_id  Int
  url     String @db.VarChar(500)
  
  gig     Gigs   @relation(fields: [gig_id], references: [id], onDelete: Cascade)

  @@map("Gig_images")
}

model Orders {
  id               Int      @id @default(autoincrement())
  gig_id           Int
  buyer_id         Int
  seller_id        Int
  status           String   @default("pending") @db.VarChar(50)
  payment_intent   String?  @db.VarChar(255)
  is_completed     Boolean  @default(false)
  price            Decimal  @db.Decimal(10, 2)
  delivery_time    Int
  revisions        Int      @default(0)
  features         Json?
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt
  
  gig              Gigs               @relation(fields: [gig_id], references: [id])
  buyer            Users              @relation("BuyerOrders", fields: [buyer_id], references: [id])
  seller           Users              @relation("SellerOrders", fields: [seller_id], references: [id])
  revisions_rel    Order_revisions[]
  deliveries       Order_deliveries[]

  @@map("Orders")
}

model Order_revisions {
  id           Int      @id @default(autoincrement())
  order_id     Int
  requested_by Int
  reason       String   @db.Text
  status       String   @default("pending") @db.VarChar(50)
  created_at   DateTime @default(now())
  
  order        Orders             @relation(fields: [order_id], references: [id])
  requester    Users              @relation(fields: [requested_by], references: [id])
  deliveries   Order_deliveries[]

  @@map("Order_revisions")
}

model Order_deliveries {
  id          Int      @id @default(autoincrement())
  order_id    Int
  revision_id Int?
  message     String   @db.Text
  attachment  String?  @db.VarChar(500)
  created_at  DateTime @default(now())
  
  order       Orders           @relation(fields: [order_id], references: [id])
  revision    Order_revisions? @relation(fields: [revision_id], references: [id])

  @@map("Order_deliveries")
}

model Conversation {
  id             Int      @id @default(autoincrement())
  participant1_id Int
  participant2_id Int
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt
  
  participant1   Users           @relation("Participant1", fields: [participant1_id], references: [id])
  participant2   Users           @relation("Participant2", fields: [participant2_id], references: [id])
  messages       Chat_messages[]

  @@map("Conversation")
}

model Chat_messages {
  id              Int      @id @default(autoincrement())
  conversation_id Int
  sender_id       Int
  message         String   @db.Text
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now())
  
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
  sender          Users        @relation(fields: [sender_id], references: [id])

  @@map("Chat_messages")
}

model Reviews {
  id          Int      @id @default(autoincrement())
  gig_id      Int?
  order_id    Int?
  reviewer_id Int
  reviewee_id Int
  rating      Int
  review      String   @db.Text
  created_at  DateTime @default(now())
  
  reviewer    Users @relation("ReviewGiver", fields: [reviewer_id], references: [id])
  reviewee    Users @relation("ReviewReceiver", fields: [reviewee_id], references: [id])

  @@map("Reviews")
}